trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'CONEXÃO AZURE CONTAINER REGISTRY'
  imageRepository: 'calculoimc0'
  containerRegistry: 'anpazdevops.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'imgpullsecret-auth'
  testResultsPath: '$(Build.SourcesDirectory)/Calculos.Common.Tests/TestResults'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Tests
  displayName: Tests
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: docker build -f Dockerfile.tests . -t imctests:$(tag)
      displayName: Geração de imagem para execução dos testes
    - script: docker images
      displayName: Listar imagens no ambiente
    - script: |
        docker run -v $(testResultsPath):/Calculos.Common.Tests/TestResults imctests:$(tag)
      displayName: Executar container com testes
    - script: |
        cd $(Build.SourcesDirectory)/Calculos.Common.Tests/TestResults
        ls
      condition: always()
      displayName: Exibir conteúdo do diretório TestResults
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/resultado-testes.trx'
        searchFolder: '$(Build.SourcesDirectory)'
      condition: always()
      displayName: Publicar resultado dos testes
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coveragereport/Cobertura.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/'
      condition: always()
      displayName: Publicar relatório de cobertura de código
    - task: PublishHtmlReport@1
      inputs:
        reportDir: '$(testResultsPath)/resultado-testes.html'
      condition: always()
      displayName: Publicar HTML com resultado dos testes

- stage: Build
  dependsOn: Tests
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'CalculoIMC0.calculoimc0'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)